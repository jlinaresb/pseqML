require(pseqML)

# Required packges
require(mlr3)
require(caret)
require(phyloseq)

# Task
# =======================================
# =======================================
# Random Example data in package
data('random_pseq')
pseq

# Convert phyloseq to pseqML
xx = pseq2mlr(phyloseq = pseq,
              target = 'cancer',
              id = 'example')


# Make feature Selection
pseqML::filterCFS(xx, cutoff = 0.1)



# Leaner
# =======================================
# =======================================
# Defining cv inner
cv.in = init_resampling(new('resampling', resampling = 'holdout', ratio = 0.6))
search = new('search', measure = 'classif.acc', terminator = list('evals', 10), tuner = list('grid_search', 10))

# Defining learners
g = setHyperparameters(new('GLMNET'),
                       cv.in,
                       search)
n = setHyperparameters(new('NB'),
                       cv.in,
                       search)

# Outer
# =======================================
# =======================================
# Set outer resampling
outer = init_resampling(new('resampling', resampling = 'repeated_cv', repeats = 2, folds = 3))


# Train
# =======================================
tr = pseqML::trainML(task = pseqMLR,
                     learner = g,
                     predict = F)

# Resampling
# =======================================
rs = pseqML::rsmplML(task = pseqMLR,
                     learner = g,
                     outer = outer)

# Benchmark
# =======================================
bmr = pseqML::benchML(tasks = list(pseqMLR),
                      learners = list(g, n),
                      outer = outer)

bmr$aggregate(msrs(c('classif.ce', 'classif.acc', 'time_train')))


# Plot BMR results
# ======================
autoplot(bmr)
autoplot(bmr$clone()$filter(task_id = 'example'), type = 'roc')


# Extract BMR results
# ======================
res = bmr$aggregate()
res = res[task_id == 'example' & learner_id == 'classif.glmnet.tuned']$resample_result[[1]]
res$predictions()
res$prediction()
res$prediction()$confusion
