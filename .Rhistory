# =======================================
# =======================================
# Load phyloseq data
pseq = readRDS('~/projects/Metagenomics/data/phyloseq_probeCase.rds')
dir.create('data')
save(pseq, file = 'data/random_pseq.RData')
library(pseqML)
traceback()
require(pseqML)
data('random_pseq')
require(pseqML)
data('random_pseq')
pseq
pseq
require(phyloseq)
pseq
require(phyloseq)
require(pseqML)
data('random_pseq')
pseq
# Convert phyloseq to pseqML
xx = pseq2mlr(phyloseq = pseq,
target = 'cancer',
id = 'example')
require(mlr3)
require(caret)
require(phyloseq)
# Convert phyloseq to pseqML
xx = pseq2mlr(phyloseq = pseq,
target = 'cancer',
id = 'example')
class(pseq)
require(pseqML)
# Task
# =======================================
# =======================================
# Random Example data in package
data('random_pseq')
pseq
library(pseqML)
# Convert phyloseq to pseqML
xx = pseq2mlr(phyloseq = pseq,
target = 'cancer',
id = 'example')
# Required packges
require(mlr3)
setOldClass('phyloseq')
setOldClass('TaskClassif')
# Convert phyloseq to pseqML
xx = pseq2mlr(phyloseq = pseq,
target = 'cancer',
id = 'example')
library(pseqML)
require(pseqML)
require(mlr3)
require(caret)
require(phyloseq)
# Task
# =======================================
# =======================================
# Random Example data in package
data('random_pseq')
pseq
# Convert phyloseq to pseqML
xx = pseq2mlr(phyloseq = pseq,
target = 'cancer',
id = 'example')
setOldClass('TaskClassif')
#' The S4 Class for storing phyloseq data to carried out ML analyisis.
#'
#' This object stores the all information of metagenomic data
#' in one \code{\link{phyloseq}} class. In addition, ...
#' @exportClass pseqML
setClass('pseqML',
slots = c(
data = 'phyloseq',
target = 'character')
))
#' The S4 class inherited from \code{pseqML} to storage also \code{TaskClassif} data
#' @exportClass pseqMLR
setClass('pseqMLR',
contains = 'pseqML',
slots = c(
task = 'TaskClassif'))
setOldClass('TaskClassif')
#' The S4 Class for storing phyloseq data to carried out ML analyisis.
#'
#' This object stores the all information of metagenomic data
#' in one \code{\link{phyloseq}} class. In addition, ...
#' @exportClass pseqML
setClass('pseqML',
slots = c(
data = 'phyloseq',
target = 'character'))
#' The S4 class inherited from \code{pseqML} to storage also \code{TaskClassif} data
#' @exportClass pseqMLR
setClass('pseqMLR',
contains = 'pseqML',
slots = c(
task = 'TaskClassif'))
kk = new('pseqML', pseq, 'cancer')
library(pseqML)
# Task
# =======================================
# =======================================
# Random Example data in package
data('random_pseq')
pseq
kk = new('pseqML', pseq, 'cancer')
setClass('pseqML',
slots = c(
data = 'phyloseq',
target = 'character'))
kk = new('pseqML', pseq, 'cancer')
kk = new('pseqML', data = pseq, target = 'cancer')
kk
setGeneric('get_X', function(x) standardGeneric('get_X'))
setMethod('get_X', 'pseqML', function(x) as.data.frame(t(x@data@otu_table@.Data)))
#' @export get_Y
setGeneric('get_Y', function(x) standardGeneric('get_Y'))
setMethod('get_Y', 'pseqML', function(x) as.factor(phyloseq::get_variable(x@data, x@pseq@target)))
x = get_X(kk)
y = get_Y(kk)
#' @export get_Y
setGeneric('get_Y', function(x) standardGeneric('get_Y'))
setMethod('get_Y', 'pseqML', function(x) as.factor(phyloseq::get_variable(x@data, x@target)))
y = get_Y(kk)
library(pseqML)
# Task
# =======================================
# =======================================
# Random Example data in package
data('random_pseq')
pseq
# Convert phyloseq to pseqML
xx = pseq2mlr(phyloseq = pseq,
target = 'cancer',
id = 'example')
library(pseqML)
# Task
# =======================================
# =======================================
# Random Example data in package
data('random_pseq')
kk = new('pseqML', data = pseq, target = 'cancer')
kk
# Convert phyloseq to pseqML
xx = pseq2mlr(phyloseq = pseq,
target = 'cancer',
id = 'example')
xx
devtools::document()
devtools::document()
class(xx)
class(pseq)
get_Y(xx)
listFilterMethods()
# Make feature Selection
pseqML::filterCFS(xx, cutoff = 0.1)
library(pseqML)
# Task
# =======================================
# =======================================
# Random Example data in package
data('random_pseq')
kk = new('pseqML', data = pseq, target = 'cancer')
# Convert phyloseq to pseqML
xx = pseq2mlr(phyloseq = pseq,
target = 'cancer',
id = 'example')
require(pseqML)
# Convert phyloseq to pseqML
xx = pseq2mlr(phyloseq = pseq,
target = 'cancer',
id = 'example')
devtools::document()
devtools::document()
devtools::document()
devtools::document()
library(pseqML)
require(pseqML)
# Task
# =======================================
# =======================================
# Random Example data in package
data('random_pseq')
# Convert phyloseq to pseqML
xx = pseq2mlr(phyloseq = pseq,
target = 'cancer',
id = 'example')
# Make feature Selection
pseqML::filterCFS(xx, cutoff = 0.1)
# Make feature Selection
filt = pseqML::filterCFS(xx, cutoff = 0.1)
filt
xx
filt
library(pseqML)
require(pseqML)
# Task
# =======================================
# =======================================
# Random Example data in package
data('random_pseq')
# Convert phyloseq to pseqML
xx = pseq2mlr(phyloseq = pseq,
target = 'cancer',
id = 'example')
# Make feature Selection
filt = pseqML::filterCFS(xx, cutoff = 0.1)
filt
# Leaner
# =======================================
# =======================================
# Defining cv inner
cv.in = init_resampling(new('resampling', resampling = 'holdout', ratio = 0.6))
search = new('search', measure = 'classif.acc', terminator = list('evals', 10), tuner = list('grid_search', 10))
# Defining learners
g = setHyperparameters(new('GLMNET'),
cv.in,
search)
n = setHyperparameters(new('NB'),
cv.in,
search)
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
rlang::last_error()
devtools::load_all(".")
xx = readRDS("../MOMICS/extdata/preciseads/raw/clinical_complete.rds")
View(xx)
table(xx$Diagnosis)
require(OmnipathR)
xx <- OmnipathR::get_signed_ptms()
sessionInfo()
devtools::load_all(".")
require(pseqML)
require(mlr3)
require(mlr3learners)
require(mlr3verse)
require(caret)
require(phyloseq)
data("data/random_pseq.RData")
data("random_pseq.RData")
data("random_pseq")
data
pseq
pseqML = pseq2mlr(phyloseq = pseq,
target = 'cancer',
id = 'example')
pseqML
# Preprocessing sets
check_prevalence(pseqML, level = "Species")
View(tax_table(pseq))
# Preprocessing sets
check_prevalence(pseqML, level = "Rank6")
# Transform counts
relative_abundance(pseqML)
# Transform counts
relab <- relative_abundance(pseqML)
otu_table(pseqML@data)
otu_table(relab@data)
zscore <- zscore_abundance(pseqML)
otu_table(zscore@data)
deep <- deep_median_abundance(pseqML)
otu_table(deep@data)
tranform_counts(pseqML, "clr")
transform_counts(pseqML, "clr")
microbiome::transform(pseq, transform =  'alr', shift=1, reference=1)
microbiome::transform(pseq, transform =  'clr', shift=1, reference=1)
# Filter taxonomic features
pseqML_f <- filtering_taxa(
pseqMLR = pseqML,
type = "mean",
threshold = 1,
percentage = 0.5)
pseqML_f
# Filter taxonomic features
pseqML_f <- filtering_taxa(
pseqMLR = pseqML,
type = "coef_var",
threshold = 1,
percentage = 0.5)
pseqML_f
# Filter taxonomic features
pseqML_f <- filtering_taxa(
pseqMLR = pseqML,
type = "presence",
threshold = 1,
percentage = 0.5)
pseqML_f
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
require(pseqML)
require(mlr3)
require(mlr3learners)
require(mlr3verse)
require(caret)
require(phyloseq)
data("random_pseq")
pseq
pseqML = pseq2mlr(phyloseq = pseq,
target = 'cancer',
id = 'example')
# Checking steps
check_prevalence(pseqML, level = "Rank6")
check_prevalence(pseqML, level = "Rank6")
# Transform counts
relab <- relative_abundance(pseqML)
otu_table(relab@data)
# Checking steps
print(check_prevalence(pseqML, level = "Rank6"))
otu_table(relab@data)
zscore <- zscore_abundance(pseqML)
otu_table(zscore@data)
deep <- deep_median_abundance(pseqML) # doesn´t works!
otu_table(deep@data)
transform_counts(pseqML, "clr")   # doesn´t works!
transform(
pseqML@data,
transform = "clr",
shift = 1, reference = 1)
t <- transform_counts(pseqML, "alr")   # doesn´t works!
# Filter taxonomic features
pseqML_f <- filtering_taxa(
pseqMLR = pseqML,
type = "presence",
threshold = 1,
percentage = 0.5)
pseqML_f
# Filter samples
pseqML_fs <- filtering_counts(pseqML, 10)
pseqML_fs
pseqML_fs
# Filter samples
pseqML
pseqML_fs <- filtering_counts(pseqML, 120)
pseqML_fs
# Filter samples
pseqML
pseqML_fs <- filtering_counts(pseqML, 120)
pseqML_fs
pseqML_fs <- filtering_counts(pseqML, 12)
pseqML_fs
data("random_pseq")
print(pseq)
names(sample_data(pseq))
# Checking steps
print(check_prevalence(pseqML, level = "Rank6"))
data("random_pseq")
print(pseq)
names(sample_data(pseq))
pseqML <- pseq2mlr(
phyloseq = pseq,
target = "cancer",
id = "example")
# Then, you can load pseqML
require(pseqML)
# Then, you can load pseqML
require(pseqML)
pseqML <- pseq2mlr(
phyloseq = pseq,
target = "cancer",
id = "example")
require(mlr3)
require(mlr3learners)
require(mlr3verse)
require(caret)
require(phyloseq)
# Then, you can load pseqML
require(pseqML)
pseqML <- pseq2mlr(
phyloseq = pseq,
target = "cancer",
id = "example")
# Checking steps
print(check_prevalence(pseqML, level = "Rank6"))
# Checking steps
check_prevalence(pseqML, level = "Rank6")
# Transform counts
relab <- relative_abundance(pseqML)
# Then, you can load pseqML
require(pseqML)
pseqML <- pseq2mlr(
phyloseq = pseq,
target = "cancer",
id = "example")
# Transform counts
relab <- relative_abundance(pseqML)
zscore <- zscore_abundance(pseqML)
devtools::load_all(".")
# Checking steps
check_prevalence(pseqML, level = "Rank6")
# Transform counts
relab <- relative_abundance(pseqML)
otu_table(relab@data)
zscore <- zscore_abundance(pseqML)
otu_table(zscore@data)
deep <- deep_median_abundance(pseqML)
otu_table(deep@data)
t <- transform_counts(pseqML, "alr")   # doesn´t works!
require(microbiome)
pseqMLR = pseqML
pseqMLR@data <- transform(
pseqMLR@data,
transform = transform,
shift = 1, reference = 1)
pseqMLR@data
transform(
pseqMLR@data,
transform = transform,
shift = 1, reference = 1)
transform = "alr"
transform(
pseqMLR@data,
transform = transform,
shift = 1, reference = 1)
pseqMLR@data <- transform(
pseqMLR@data,
transform = transform,
shift = 1, reference = 1)
pseqMLR@data
pseqML
devtools::load_all(".")
t <- transform_counts(pseqML, "alr")   # doesn´t works!
otu_table(t@data)
devtools::load_all(".")
t <- transform_counts(pseqML, "clr")   # doesn´t works!
otu_table(t@data)
t <- transform_counts(pseqML, "clr")
otu_table(t@data)
# Filter taxonomic features
pseqML_f <- filtering_taxa(
pseqMLR = pseqML,
type = "presence",
threshold = 1,
percentage = 0.5)
pseqML_f
# Filter taxonomic features
phyloseq::ntaxa(pseqML@data)
pseqML_f <- filtering_taxa(
pseqMLR = pseqML,
type = "presence",
threshold = 1,
percentage = 0.5)
phyloseq::ntaxa(pseqML_f@data)
# Filter samples
pseqML
pseqML_fs <- filtering_counts(pseqML, 12)
pseqML_fs
# Filter samples
phyloseq::nsamples(pseqML)
# Filter samples
phyloseq::nsamples(pseqML@data)
phyloseq::nsamples(pseqML_fs@data)
# Transform counts
relab <- relative_abundance(pseqML)
install.packages("ggpubr")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
rlang::last_error()
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
plot_abundances(pseqMLR, level = "Rank3")
devtools::install_github('schuyler-smith/phylosmith')
plot_abundances(pseqMLR, level = "Rank3")
pseqML
plot_abundances(pseqML, level = "Rank3")
plot_abundances(pseqML, level = "Rank6")
plot_abundances(pseqML, level = "Rank5")
plot_abundances_target(pseqML, level = "Rank5")
plot_richness(pseqML, index = "shannon")
plot_abundances_bars(pseqML, level = "Rank6", transformation = "none")
plot_abundances_lines(pseqML, level = "Rank6")
plot_heatmap(pseqML, level = "Rank6", transformation = "log")
devtools::load_all(".")
plot_heatmap(pseqML, level = "Rank6", transformation = "log")  # error!
devtools::load_all(".")
plot_heatmap(pseqML, level = "Rank6", transformation = "log")  # error!
devtools::load_all(".")
plot_varcorr(pseqML, target = NULL, level = "Rank6", method = "pearson")
devtools::load_all(".")
plot_taxa_core(pseqML, target = NULL)
# You need to have installed the following packages
require(mlr3)
require(mlr3learners)
require(mlr3verse)
require(caret)
require(caret)
require(phyloseq)
# Then, you can load pseqML
require(pseqML)
data("random_pseq")
print(pseq)
names(sample_data(pseq))
pseqML <- pseq2mlr(
phyloseq = pseq,
target = "cancer",
id = "example")
# Transform counts
relab <- relative_abundance(pseqML)
devtools::load_all(".")
# Transform counts
relab <- relative_abundance(pseqML)
plot_abundances(pseqML, level = "Rank5")              # Warning!
plot_abundances_target(pseqML, level = "Rank5")       # Warning!
plot_richness(pseqML, index = "shannon")
plot_abundances_bars(pseqML, level = "Rank6", transformation = "none") # warning
