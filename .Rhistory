pseqML = new('pseqML', data = pseq, target = 'cancer')
pseqMLR = pseq2mlr(pseqML)
pseqMLR
l = learner('classif.lda')
l = lrn('classif.lda')
l$param_set
l = lrn('classif.naive_bayes')
l$param_set
setGeneric('naiveBayes', function(inner, k) standardGeneric('naiveBayes'))
setMethod('naiveBayes',
signature('inner'),
function(inner, l){
learner = lrn('classif.naive_bayes')
ps = ps(
laplace = p_dbl(lower = l[[1]], upper = l[[2]]))
cv.inner = rsmp(inner@resampling)
measure = msr(inner@measure)
terminator = trm(inner@terminator[[1]], n_evals = inner@terminator[[2]])
tuner = tnr(inner@tuner[[1]], resolution = inner@tuner[[2]])
at = AutoTuner$new(learner, cv.inner, measure, terminator, tuner, ps)
return(at)
})
setGeneric('naiveBayes', function(inner, k) standardGeneric('naiveBayes'))
setMethod('naiveBayes',
signature('inner'),
function(inner, l){
learner = lrn('classif.naive_bayes')
ps = ps(
laplace = p_dbl(lower = l[[1]], upper = l[[2]]))
cv.inner = rsmp(inner@resampling)
measure = msr(inner@measure)
terminator = trm(inner@terminator[[1]], n_evals = inner@terminator[[2]])
tuner = tnr(inner@tuner[[1]], resolution = inner@tuner[[2]])
at = AutoTuner$new(learner, cv.inner, measure, terminator, tuner, ps)
return(at)
})
setGeneric('naiveBayes', function(inner, l) standardGeneric('naiveBayes'))
setMethod('naiveBayes',
signature('inner'),
function(inner, l){
learner = lrn('classif.naive_bayes')
ps = ps(
laplace = p_dbl(lower = l[[1]], upper = l[[2]]))
cv.inner = rsmp(inner@resampling)
measure = msr(inner@measure)
terminator = trm(inner@terminator[[1]], n_evals = inner@terminator[[2]])
tuner = tnr(inner@tuner[[1]], resolution = inner@tuner[[2]])
at = AutoTuner$new(learner, cv.inner, measure, terminator, tuner, ps)
return(at)
})
setGeneric('glmnet', function(inner, s) standardGeneric('glmnet'))
setMethod('glmnet',
signature('inner'),
function(inner, alpha, s){
learner = lrn('classif.glmnet')
ps = ps(
alpha = p_dbl(lower = alpha[[1]], upper = alpha[[2]]),
s = p_dbl(lower = s[[1]], upper = s[[2]]))
cv.inner = rsmp(inner@resampling)
measure = msr(inner@measure)
terminator = trm(inner@terminator[[1]], n_evals = inner@terminator[[2]])
tuner = tnr(inner@tuner[[1]], resolution = inner@tuner[[2]])
at = AutoTuner$new(learner, cv.inner, measure, terminator, tuner, ps)
return(at)
})
setGeneric('glmnet', function(inner, alpha, s) standardGeneric('glmnet'))
setMethod('glmnet',
signature('inner'),
function(inner, alpha, s){
learner = lrn('classif.glmnet')
ps = ps(
alpha = p_dbl(lower = alpha[[1]], upper = alpha[[2]]),
s = p_dbl(lower = s[[1]], upper = s[[2]]))
cv.inner = rsmp(inner@resampling)
measure = msr(inner@measure)
terminator = trm(inner@terminator[[1]], n_evals = inner@terminator[[2]])
tuner = tnr(inner@tuner[[1]], resolution = inner@tuner[[2]])
at = AutoTuner$new(learner, cv.inner, measure, terminator, tuner, ps)
return(at)
})
setGeneric('knn', function(inner, k) standardGeneric('knn'))
setMethod('knn',
signature('inner'),
function(inner, k){
learner = lrn('classif.kknn')
ps = ps(
k = p_int(lower = k[[1]], upper = k[[2]]))
cv.inner = rsmp(inner@resampling)
measure = msr(inner@measure)
terminator = trm(inner@terminator[[1]], n_evals = inner@terminator[[2]])
tuner = tnr(inner@tuner[[1]], resolution = inner@tuner[[2]])
at = AutoTuner$new(learner, cv.inner, measure, terminator, tuner, ps)
return(at)
})
# Defining learners
## k-NN
l.knn = knn(cv.in, k = list(1, 15))
## glmnet
l.glmnet = glmnet(cv.in, alpha = list(0,1), s = list(0,1))
## naive bayes
l.nb = naiveBayes(inner, l = list(0,1))
## naive bayes
l.nb = naiveBayes(cv.in, l = list(0,1))
grid.bmr = benchmark_grid(
task = plseqMLR,
learner = list(l.knn, l.glmnet, l.nb),
resampling = rsmp('cv', folds = 3)
)
# Convert pseqML to MLR task
pseqMLR = pseq2mlr(pseqML)
grid.bmr = benchmark_grid(
task = plseqMLR,
learner = list(l.knn, l.glmnet, l.nb),
resampling = rsmp('cv', folds = 3)
)
pseqMLR
grid.bmr = benchmark_grid(
task = pseqMLR,
learner = list(l.knn, l.glmnet, l.nb),
resampling = rsmp('cv', folds = 3)
)
bmr = benchmark(grid.bmr)
warnings()
bmr$aggregate(msrs(c('classif.ce', 'classif.acc', 'time_train')))
setClass('model',
slots = c(
l = 'character'))
setClass('KNN',
contains = 'model',
slots = c(
ps = 'list')
prototype = list(
l = 'classif.kknn',
ps = list(k = list(1, 15))
))
setClass('KNN',
contains = 'model',
slots = c(
ps = 'list'),
prototype = list(
l = 'classif.kknn',
ps = list(k = list(1, 15))
))
lll = new('KNN')
lll
ps = ps(
laplace = p_dbl(lower = l[[1]], upper = l[[2]]))
ps = ps(
laplace = p_dbl(lower = 0, upper = 1))
class(ps)
setClass('KNN',
contains = 'model',
slots = c(
ps = 'ParamSet'),
prototype = list(
l = 'classif.kknn',
ps = ps(
k = p_int(lower = 0, upper = 1)
))
))
setClass('KNN',
contains = 'model',
slots = c(
ps = 'ParamSet'),
prototype = list(
l = 'classif.kknn',
ps = ps(k = p_int(lower = 0, upper = 1))
))
setClass('KNN',
contains = 'model',
slots = c(
ps = 'list'),
prototype = list(
l = 'classif.kknn',
ps = list(k = list(lower = 0, upper = 1))
))
xx = new('KNN')
xx
xx@ps[[1]]
xx@ps$k[[1]]
setClass('GLMNET',
contains = 'model',
slots = c(
ps = 'list'),
prototype = list(
l = 'classif.glmnet',
ps = list(alpha = list(lower = 0, upper = 1),
s     = list(lower = 0, upper = 1))
))
setClass('KNN',
contains = 'model',
slots = c(
ps = 'list'),
prototype = list(
l = 'classif.kknn',
ps = list(k = list(lower = 0, upper = 1))
))
# Defining learners
k = new('KNN')
g = new('glmnet')
g = new('GLMNET')
g
setGeneric('setHyperparameters', function(learner, inner) standardGeneric('setHyperparameters'))
setMethod('setHyperparameters',
signature('model'),
function(model, inner){
name = model@l
learner = lrn(name)
if (name == 'classif.kknn'){
ps = ps(
k = p_int(lower = model@ps$k[[1]], upper =model@ps$k[[2]]))
} else if (name == 'classif.glmnet'){
ps = ps(
alpha = p_dbl(lower = model@ps$alpha[[1]], upper =model@ps$alpha[[1]]),
s = p_dbl(lower = model@ps$s[[1]], upper = model@ps$s[[1]]))
}
cv.inner = rsmp(inner@resampling)
measure = msr(inner@measure)
terminator = trm(inner@terminator[[1]], n_evals = inner@terminator[[2]])
tuner = tnr(inner@tuner[[1]], resolution = inner@tuner[[2]])
at = AutoTuner$new(learner, cv.inner, measure, terminator, tuner, ps)
})
setGeneric('setHyperparameters', function(model, inner) standardGeneric('setHyperparameters'))
setMethod('setHyperparameters',
signature('model'),
function(model, inner){
name = model@l
learner = lrn(name)
if (name == 'classif.kknn'){
ps = ps(
k = p_int(lower = model@ps$k[[1]], upper =model@ps$k[[2]]))
} else if (name == 'classif.glmnet'){
ps = ps(
alpha = p_dbl(lower = model@ps$alpha[[1]], upper =model@ps$alpha[[1]]),
s = p_dbl(lower = model@ps$s[[1]], upper = model@ps$s[[1]]))
}
cv.inner = rsmp(inner@resampling)
measure = msr(inner@measure)
terminator = trm(inner@terminator[[1]], n_evals = inner@terminator[[2]])
tuner = tnr(inner@tuner[[1]], resolution = inner@tuner[[2]])
at = AutoTuner$new(learner, cv.inner, measure, terminator, tuner, ps)
})
# Defining learners
k = setHyperparameters(new('KNN'), inner)
# Defining learners
k = setHyperparameters(new('KNN'), cv.inner)
# Defining learners
k = setHyperparameters(new('KNN'), cv.in)
k
g = setHyperparameters(new('GLMNET', cv.in)
g = setHyperparameters(new('GLMNET'), cv.in)
g = setHyperparameters(new('GLMNET'), cv.in)
class(pseqMLR)
class(bmr)
source('~/git/pseqML/R/AllClasses.r')
source('~/git/pseqML/R/AllClasses.r')
library(pseqML)
require(pseqML)
# Load phyloseq data
pseq = readRDS('~/projects/Metagenomics/data/phyloseq_probeCase.rds')
# Convert phyloseq to pseqML
pseqML = new('pseqML', data = pseq, target = 'cancer')
# Convert pseqML to MLR task
pseqMLR = pseq2mlr(pseqML, id = 'example')
# Defining cv inner
cv.in = new('inner')
# Defining learners
k = setHyperparameters(new('KNN'), cv.in)
g = setHyperparameters(new('GLMNET'), cv.in)
bmr = pseqML::benchML(tasks = list(pseqMLR),
learners = list(k, g))
library(pseqML)
require(pseqML)
# Load phyloseq data
pseq = readRDS('~/projects/Metagenomics/data/phyloseq_probeCase.rds')
# Convert phyloseq to pseqML
pseqML = new('pseqML', data = pseq, target = 'cancer')
# Convert pseqML to MLR task
pseqMLR = pseq2mlr(pseqML, id = 'example')
# Defining cv inner
cv.in = new('inner')
# Defining learners
k = setHyperparameters(new('KNN'), cv.in)
g = setHyperparameters(new('GLMNET'), cv.in)
bmr = pseqML::benchML(tasks = list(pseqMLR),
learners = list(k, g))
bmr = pseqML::benchML(tasks = list(pseqMLR),
learners = list(g))
bmr
bmr$aggregate(msrs(c('classif.ce', 'classif.acc', 'time_train')))
bmr = pseqML::benchML(tasks = list(pseqMLR),
learners = list(k))
# Defining learners
k = setHyperparameters(new('KNN', ps = list(k = list(1, 15))), cv.in)
bmr = pseqML::benchML(tasks = list(pseqMLR),
learners = list(k))
bmr$aggregate(msrs(c('classif.ce', 'classif.acc', 'time_train')))
require(mlr3)
as.data.table(mlr_resamplings)
r = rsmp('cv', folds = 3)
r
r = rsmp('repeated_cv', repeats = 5, folds = 3)
r
setMethod('check',
signature('outer'),
function(object){
strategies = c('bootstrap', 'cv', 'holdout', 'loo', 'repeated_cv')
stopifnot(object@resampling %in% strategies)
if (object@resampling == 'bootstrap'){
outer = rsmp(object@resampling, repeats = object@repeats, ratio = object@ratio, folds = NULL)
} else if (object@resampling == 'cv'){
outer = rsmp(object@resampling, folds = object@folds)
} else if (object@resampling == 'holdout'){
outer = rsmp(object@resampling, ratio = object@ratio)
} else if (object@resampling == 'loo'){
outer = rsmp(object@resampling)
} else if (object@resampling == 'repeated_cv'){
outer = rsmp(object@resampling, repeats = object@repeats, folds = NULL)
}
})
setGeneric('check', function(object) standardGeneric('check'))
setMethod('check',
signature('outer'),
function(object){
strategies = c('bootstrap', 'cv', 'holdout', 'loo', 'repeated_cv')
stopifnot(object@resampling %in% strategies)
if (object@resampling == 'bootstrap'){
outer = rsmp(object@resampling, repeats = object@repeats, ratio = object@ratio, folds = NULL)
} else if (object@resampling == 'cv'){
outer = rsmp(object@resampling, folds = object@folds)
} else if (object@resampling == 'holdout'){
outer = rsmp(object@resampling, ratio = object@ratio)
} else if (object@resampling == 'loo'){
outer = rsmp(object@resampling)
} else if (object@resampling == 'repeated_cv'){
outer = rsmp(object@resampling, repeats = object@repeats, folds = NULL)
}
})
setClass('outer',
slots = c(
resampling = 'character',
repeats = 'numeric',
ratio = 'numeric',
folds = 'numeric'
),
prototype = list(
resampling = 'cv',
repeats = NULL,
ratio = NULL,
folds = 5,
))
setClass('outer',
slots = c(
resampling = 'character',
repeats = 'numeric',
ratio = 'numeric',
folds = 'numeric'
),
prototype = list(
resampling = 'cv',
repeats = NULL,
ratio = NULL,
folds = 5
))
setGeneric('check', function(object) standardGeneric('check'))
setMethod('check',
signature('outer'),
function(object){
strategies = c('bootstrap', 'cv', 'holdout', 'loo', 'repeated_cv')
stopifnot(object@resampling %in% strategies)
if (object@resampling == 'bootstrap'){
outer = rsmp(object@resampling, repeats = object@repeats, ratio = object@ratio, folds = NULL)
} else if (object@resampling == 'cv'){
outer = rsmp(object@resampling, folds = object@folds)
} else if (object@resampling == 'holdout'){
outer = rsmp(object@resampling, ratio = object@ratio)
} else if (object@resampling == 'loo'){
outer = rsmp(object@resampling)
} else if (object@resampling == 'repeated_cv'){
outer = rsmp(object@resampling, repeats = object@repeats, folds = NULL)
}
})
o = new('outer')
o
o = new('outer', resampling = 'bootstrap', repeats = 2, ratio = 0.6)
o
setGeneric('check', function(object) standardGeneric('check'))
setMethod('check',
signature('outer'),
function(object){
strategies = c('bootstrap', 'cv', 'holdout', 'loo', 'repeated_cv')
stopifnot(object@resampling %in% strategies)
if (object@resampling == 'bootstrap'){
outer = rsmp(object@resampling, repeats = object@repeats, ratio = object@ratio, folds = NULL)
} else if (object@resampling == 'cv'){
outer = rsmp(object@resampling, folds = object@folds)
} else if (object@resampling == 'holdout'){
outer = rsmp(object@resampling, ratio = object@ratio)
} else if (object@resampling == 'loo'){
outer = rsmp(object@resampling)
} else if (object@resampling == 'repeated_cv'){
outer = rsmp(object@resampling, repeats = object@repeats, folds = NULL)
}
return(outer)
})
setGeneric('init_outer', function(object) standardGeneric('check'))
setMethod('init_outer',
signature('outer'),
function(object){
strategies = c('bootstrap', 'cv', 'holdout', 'loo', 'repeated_cv')
stopifnot(object@resampling %in% strategies)
if (object@resampling == 'bootstrap'){
outer = rsmp(object@resampling, repeats = object@repeats, ratio = object@ratio, folds = NULL)
} else if (object@resampling == 'cv'){
outer = rsmp(object@resampling, folds = object@folds)
} else if (object@resampling == 'holdout'){
outer = rsmp(object@resampling, ratio = object@ratio)
} else if (object@resampling == 'loo'){
outer = rsmp(object@resampling)
} else if (object@resampling == 'repeated_cv'){
outer = rsmp(object@resampling, repeats = object@repeats, folds = NULL)
}
return(outer)
})
setGeneric('init_outer', function(object) standardGeneric('init_outer'))
setMethod('init_outer',
signature('outer'),
function(object){
strategies = c('bootstrap', 'cv', 'holdout', 'loo', 'repeated_cv')
stopifnot(object@resampling %in% strategies)
if (object@resampling == 'bootstrap'){
outer = rsmp(object@resampling, repeats = object@repeats, ratio = object@ratio, folds = NULL)
} else if (object@resampling == 'cv'){
outer = rsmp(object@resampling, folds = object@folds)
} else if (object@resampling == 'holdout'){
outer = rsmp(object@resampling, ratio = object@ratio)
} else if (object@resampling == 'loo'){
outer = rsmp(object@resampling)
} else if (object@resampling == 'repeated_cv'){
outer = rsmp(object@resampling, repeats = object@repeats, folds = NULL)
}
return(outer)
})
init_outer(new('outer', resampling = 'repeated_cv', repeats = 5, folds = 10))
outer = new('outer', resampling = 'repeated_cv', repeats = 5, folds = 10)
outer = new('outer', resampling = 'repeated_cv', repeats = 5, folds = 10)
new('outer')
setClass('outer',
slots = c(
resampling = 'character',
repeats = 'numeric',
ratio = 'numeric',
folds = 'numeric'
),
prototype = list(
resampling = 'cv',
repeats = 0,
ratio = 0,
folds = 5
))
outer = new('outer', resampling = 'repeated_cv', repeats = 5, folds = 10)
outer
outer = init_outer(outer)
setGeneric('init_outer', function(object) standardGeneric('init_outer'))
setMethod('init_outer',
signature('outer'),
function(object){
strategies = c('bootstrap', 'cv', 'holdout', 'loo', 'repeated_cv')
stopifnot(object@resampling %in% strategies)
if (object@resampling == 'bootstrap'){
outer = rsmp(object@resampling, repeats = object@repeats, ratio = object@ratio)
} else if (object@resampling == 'cv'){
outer = rsmp(object@resampling, folds = object@folds)
} else if (object@resampling == 'holdout'){
outer = rsmp(object@resampling, ratio = object@ratio)
} else if (object@resampling == 'loo'){
outer = rsmp(object@resampling)
} else if (object@resampling == 'repeated_cv'){
outer = rsmp(object@resampling, repeats = object@repeats, folds = object@folds)
}
return(outer)
})
outer = init_outer(outer)
outer
library(pseqML)
source('~/.active-rstudio-document', echo=TRUE)
# Load phyloseq data
pseq = readRDS('~/projects/Metagenomics/data/phyloseq_probeCase.rds')
# Convert phyloseq to pseqML
pseqML = new('pseqML', data = pseq, target = 'cancer')
# Convert pseqML to MLR task
pseqMLR = pseq2mlr(pseqML, id = 'example')
# Defining cv inner
cv.in = new('inner')
# Defining learners
k = setHyperparameters(new('KNN', ps = list(k = list(1, 15))), cv.in)
require(mlr3learners)
# Defining learners
k = setHyperparameters(new('KNN', ps = list(k = list(1, 15))), cv.in)
require(mlr3verse)
# Defining learners
k = setHyperparameters(new('KNN', ps = list(k = list(1, 15))), cv.in)
g = setHyperparameters(new('GLMNET'), cv.in)
n = setHyperparameters(new('NB'), cv.in)
l = list(k, g, n)
# Set outer resampling
outer = new('outer', resampling = 'repeated_cv', repeats = 5, folds = 10)
outer = init_outer(outer)
library(pseqML)
install.packages('Rtools')
install.packages('Rtools40')
writeLines('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")
