xx
data_to_plot(xx)
otu_table(xx@data)
to_plot
xx = merge_samples(pseq, "cancer", sum)
xx
tax_table(xx)
pseqMLR
data_to_plot(pseqMLR)
pseqMLR
pseqML_f <- filtering_taxa(
pseqMLR = pseqML,
type = "presence",
threshold = 1,
percentage = 0.5)
pseqML <- pseq2mlr(
phyloseq = pseq,
target = "cancer",
id = "example")
pseqMLR
data_to_plot(pseqML)
View(data_to_plot(pseqML))
to_plot <- data_to_plot(pseqML)
table(to_plot$target)
length(unique(to_plot$otus))
pseqML
merge_samples(pseqML@data, pseqML@target, sum)
data("data/random_pseq")
pseqML <- pseq2mlr(
phyloseq = pseq,
target = "cancer",
id = "example")
pseqML@data <- merge_samples(pseqML@data, pseqML@target, sum)
pseqML
to_plot <- data_to_plot(pseqML)
to_plot
pseqMLR = pseqML
# Extract data
otu <- otu_table(pseqMLR@data)
otu
label <- data.frame(
ids = rownames(sample_data(pseqMLR@data)),
target = get_variable(pseqMLR@data, pseqMLR@target))
label
taxa <- data.frame(
otus = rownames(tax_table(pseqMLR@data)),
tax_table(pseqMLR@data))
taxa
# Melt otu data
otu_melt <- reshape2::melt(otu)
otu_melt
to_plot <- data_to_plot(pseqML)
pseqML <- pseq2mlr(
phyloseq = pseq,
target = "cancer",
id = "example")
to_plot <- data_to_plot(pseqML)
to_plot
head(to_plot)
pseqML <- merge_samples(pseqML@data, pseqML@data, sum)
pseqML
pseqML <- pseq2mlr(
phyloseq = pseq,
target = "cancer",
id = "example")
pseqML <- merge_samples(pseqML@data, pseqML@data, sum)
data("data/random_pseq")
pseqML <- pseq2mlr(
phyloseq = pseq,
target = "cancer",
id = "example")
pseqML <- merge_samples(pseqML@data, pseqML@target, sum)
pseqML
pseqML <- pseq2mlr(
phyloseq = pseq,
target = "cancer",
id = "example")
pseqML@data <- merge_samples(pseqML@data, pseqML@target, sum)
pseqML
otu_table(pseqML@data)
tax_table(pseqML@data)
otu_table(pseqML@data)
sample_data(pseqML@data)
otu_table(pseqML@data)
tax_table(pseqML@data)
sample_data(pseqML@data)
melt(otu_table(pseqML@data))
tax_table(pseqML@data)
data("data/random_pseq")
pseqML <- pseq2mlr(
phyloseq = pseq,
target = "cancer",
id = "example")
pseqML@data <- merge_samples(pseqML@data, pseqML@target, sum)
# Extract data
otu <- otu_table(pseqML@data)
label <- data.frame(
ids = rownames(sample_data(pseqML@data)),
target = get_variable(pseqML@data, pseqML@target))
taxa <- data.frame(
otus = rownames(tax_table(pseqML@data)),
tax_table(pseqML@data))
otu
label
taxa
melt(otu_table(pseqML@data))
# Melt otu data
otu_melt <- reshape2::melt(otu)
names(otu_melt) <- c("otus", "ids", "counts")
otu_melt
names(otu_melt) <- c("target", "ids", "counts")
otu_melt
otu_melt
label
names(otu_melt) <- c("target", "otus", "counts")
to_plot <- dplyr::left_join(otus, taxa, by = "otus")
to_plot <- dplyr::left_join(otu_melt, taxa, by = "otus")
otu_melt
taxa
otu_melt$otus <- as.character(otu_melt$otus)
to_plot <- dplyr::left_join(otu_melt, taxa, by = "otus")
to_plot
to_plot
# Plotting
ggplot(
to_plot,
aes(
x = target,
y = counts,
fill = "Rank2"
)
) +
geom_bar()
# Plotting
ggplot(
to_plot,
aes(
x = target,
y = counts,
fill = "Rank2"
)
)
# Plotting
ggplot(
to_plot,
aes(
x = target,
y = counts,
fill = "Rank2"
)
) +
geom_bar(stat = "identity")
# Plotting
ggplot(
to_plot,
aes(
x = target,
y = counts
)
) +
geom_bar(
aes(fill = Rank2),
stat = "identity")
# Plotting
ggplot(
to_plot,
aes(
x = target,
y = counts
)
) +
geom_bar(
aes(fill = Rank3),
stat = "identity")
# Plotting
ggplot(
to_plot,
aes(
x = target,
y = counts
)
) +
geom_bar(
aes(fill = Rank4),
stat = "identity")
# Plotting
ggplot(
to_plot,
aes(
x = target,
y = counts
)
) +
geom_bar(
aes(fill = Rank5),
stat = "identity")
devtools::load_all(".")
data("data/random_pseq")
pseqML <- pseq2mlr(
phyloseq = pseq,
target = "cancer",
id = "example")
plot_abundances(pseqML)
pseqMLR <- pseq2mlr(
phyloseq = pseq,
target = "cancer",
id = "example")
# Transform counts into relative abundance
pseqMLR <- relative_abundance(pseqMLR)
# Format data to plot
to_plot <- data_to_plot(
pseqMLR,
merged = TRUE
)
to_plot
merged = TRUE
pseqMLR <- pseq2mlr(
phyloseq = pseq,
target = "cancer",
id = "example")
pseqMLR@data <- merge_samples(
x = pseqMLR@data,
group = pseqMLR@target,
fun = sum
)
# Extract data
otu <- otu_table(pseqML@data)
taxa <- data.frame(
otus = rownames(tax_table(pseqML@data)),
tax_table(pseqML@data))
# Melt otu data
otu_melt <- reshape2::melt(otu)
names(otu_melt) <- c("target", "otus", "counts")
# Join datasets
to_plot <- dplyr::left_join(otu_melt, taxa, by = "otus")
to_plot
pseqMLR@data <- merge_samples(
x = pseqMLR@data,
group = pseqMLR@target,
fun = sum
)
pseqMLR <- pseq2mlr(
phyloseq = pseq,
target = "cancer",
id = "example")
pseqMLR@data <- merge_samples(
x = pseqMLR@data,
group = pseqMLR@target,
fun = sum
)
pseqMLR
# Extract data
otu <- otu_table(pseqMLR@data)
taxa <- data.frame(
otus = rownames(tax_table(pseqMLR@data)),
tax_table(pseqMLR@data))
# Melt otu data
otu_melt <- reshape2::melt(otu)
names(otu_melt) <- c("target", "otus", "counts")
# Join datasets
to_plot <- dplyr::left_join(otu_melt, taxa, by = "otus")
otu_melt
otu_melt$otus
otu_melt$counts
# Check variable format
# NOTE: change this part to check-utils!
# ============
otu_melt$target <- make.names(as.factor(otu_melt$target))
otu_melt$otus <- as.character(otu_melt$otus)
otu_melt$counts <- as.numeric(otu_melt$counts)
# Join datasets
to_plot <- dplyr::left_join(otu_melt, taxa, by = "otus")
to_plot
devtools::load_all(".")
data("data/random_pseq")
pseqMLR <- pseq2mlr(
phyloseq = pseq,
target = "cancer",
id = "example")
plot_abundances(pseqML)
# Transform counts into relative abundance
pseqMLR <- relative_abundance(pseqMLR)
pseqMLR
# Format data to plot
to_plot <- data_to_plot(
pseqMLR,
merged = TRUE
)
to_plot
otu_table(pseqMLR@data)
to_plot
# Plotting barplot
plot <- ggplot(
to_plot,
aes(x = target, y = counts)) +
geom_col(
aes(fill = Rank5),
stat = "identity")
print(plot)
# Plotting barplot
plot <- ggplot(
to_plot,
aes(x = target, y = counts)) +
geom_col(
aes(fill = Rank5),
stat = "identity")
print(plot)
?geom_bar
phylosmith::phylogeny_profile(pseq, treatment = "cancer")
plot_abundances(pseqML)
devtools::load_all(".")
plot_abundances(pseqML)
p <- plot_abundances(pseqML)
p
phylosmith::taxa_abundance_bars(pseq, classification = "Rank6",
treatment = "cancer")
# Format data to plot
to_plot <- data_to_plot(
pseqMLR,
merged = FALSE
)
to_plot
devtools::load_all(".")
p <- plot_abundances(pseqML, tax_level = "Rank3")
devtools::load_all(".")
p <- plot_abundances_by_target(pseqML, tax_level = "Rank3")
p <- plot_abundances(pseqML, tax_level = "Rank3")
# Format data to plot
to_plot <- data_to_plot(
pseqMLR,
merged = FALSE
)
to_plot
# Plotting barplot
plot <- ggplot(
to_plot,
aes_string(
x = tax_level,
y = "counts",
fill = "target")) +
geom_bar(
stat = "identity",
position = position_dodge2(padding = 1)
)
tax_level = "Rank3"
# Plotting barplot
plot <- ggplot(
to_plot,
aes_string(
x = tax_level,
y = "counts",
fill = "target")) +
geom_bar(
stat = "identity",
position = position_dodge2(padding = 1)
)
print(plot)
to_plot
tax_level
# Plotting barplot
plot <- ggplot(
to_plot,
aes_string(
x = tax_level,
y = "counts",
fill = "target")) +
geom_bar(
aes_strin(fill = tax_level),
stat = "identity",
position = position_dodge2(padding = 1)
)
# Plotting barplot
plot <- ggplot(
to_plot,
aes_string(
x = tax_level,
y = "counts",
fill = "target")) +
geom_bar(
aes_string(fill = tax_level),
stat = "identity",
position = position_dodge2(padding = 1)
)
print(plot)
# Plotting barplot
plot <- ggplot(
to_plot,
aes_string(
x = tax_level,
y = "counts",
fill = "target")) +
geom_bar(
aes_string(fill = tax_level),
stat = "identity",
position = position_dodge2()
)
print(plot)
head(target)
head(to_plot)
# Plotting barplot
plot <- ggplot(
to_plot,
aes(
x = Rank3,
y = counts,
fill = target)) +
geom_bar(
aes_string(fill = Rank3),
stat = "identity",
position = position_dodge2()
)
# Plotting barplot
plot <- ggplot(
to_plot,
aes(
x = Rank3,
y = counts,
fill = target)) +
geom_bar(
aes(fill = Rank3),
stat = "identity",
position = position_dodge2()
)
print(plot)
# Plotting barplot
plot <- ggplot(
to_plot,
aes(
x = Rank3,
y = counts,
fill = target)) +
geom_bar(
stat = "identity",
position = position_dodge2()
)
print(plot)
# Format data to plot
to_plot <- data_to_plot(
pseqMLR,
merged = TRUE
)
head(to_plot)
# Plotting barplot
plot <- ggplot(
to_plot,
aes(
x = Rank3,
y = counts,
fill = target)) +
geom_bar(
stat = "identity",
position = position_dodge2()
)
print(plot)
phylosmith::taxa_core_graph(pseq, treatment = "cancer")
phylosmith::variable_correlation_heatmap(pseq, variables = "cancer")
require(elasticnet)
install.packages("elasticnet")
# Sparse PCA
require(elasticnet)
data(pitprops)
View(pitprops)
out1<-spca(pitprops,K=6,type="Gram",sparse="penalty",trace=TRUE,para=c(0.06,0.16,0.1,0.5,0.5,0.5))
## print the object out1
out1
out2<-spca(pitprops,K=6,type="Gram",sparse="varnum",trace=TRUE,para=c(7,4,4,1,1,1))
out2
## to see the contents of out2
names(out2)
## to get the loadings
out2$loadings
?prcomp
devtools::load_all(".")
devtools::load_all(".")
data("data/random_pseq")
data("random_pseq")
data("random_pseq")
pseqMLR <- pseq2mlr(
phyloseq = pseq,
target = "cancer",
id = "example")
devtools::load_all(".")
data("random_pseq")
pseqMLR <- pseq2mlr(
phyloseq = pseq,
target = "cancer",
id = "example")
devtools::load_all(".")
data("random_pseq")
pseqMLR <- pseq2mlr(
phyloseq = pseq,
target = "cancer",
id = "example")
require(mlr2)
require(mlr3)
pseqMLR <- pseq2mlr(
phyloseq = pseq,
target = "cancer",
id = "example")
pseqMLR
devtools::load_all(".")
data("random_pseq")
pseqMLR <- pseq2mlr(
phyloseq = pseq,
target = "cancer",
id = "example")
pseq_pca(pseqMLR, make_plot = TRUE)
pseq_pca(pseqMLR, make_plot = TRUE)
?autoplot
pseq_tsne(pseqMLR, make_plot = TRUE)
devtools::load_all(".")
pseq_pca(pseqMLR, make_plot = TRUE)
