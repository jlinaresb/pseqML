setClass('pseqMLR',
contains = 'pseqML',
slots = c(
task = 'TaskClassif'),
prototype = list(
task = NULL))
setGeneric('pseq2mlr', function(phyloseq, target, id) standardGeneric('pseq2mlr'))
setMethod('pseq2mlr',
signature('phyloseq'),
function(phyloseq, target, id){
pseqML = new('pseqML', data = phyloseq, target = target)
X = as.data.frame(t(pseqML@data@otu_table@.Data))
Y = as.factor(phyloseq::get_variable(pseqML@data, pseqML@target))
d = cbind.data.frame(X, target = Y)
names(d) = make.names(names(d))
task = TaskClassif$new(id = id,
backend = d,
target = 'target')
pseqMLR = new('pseqMLR', pseqML, task = task)
return(task)
})
# Convert phyloseq to pseqML
xx = pseq2mlr(phyloseq = pseq,
target = 'cancer',
id = 'example')
library(pseqML)
require(pseqML)
require(pseqML)
# Task
# =======================================
# =======================================
# Load phyloseq data
pseq = readRDS('~/projects/Metagenomics/data/phyloseq_probeCase.rds')
# Convert phyloseq to pseqML
xx = pseq2mlr(phyloseq = pseq,
target = 'cancer',
id = 'example')
require(mlr3)
# Convert phyloseq to pseqML
xx = pseq2mlr(phyloseq = pseq,
target = 'cancer',
id = 'example')
xx
library(pseqML)
# Task
# =======================================
# =======================================
# Load phyloseq data
pseq = readRDS('~/projects/Metagenomics/data/phyloseq_probeCase.rds')
# Convert phyloseq to pseqML
xx = pseq2mlr(phyloseq = pseq,
target = 'cancer',
id = 'example')
library(pseqML)
# Task
# =======================================
# =======================================
# Load phyloseq data
pseq = readRDS('~/projects/Metagenomics/data/phyloseq_probeCase.rds')
# Convert phyloseq to pseqML
xx = pseq2mlr(phyloseq = pseq,
target = 'cancer',
id = 'example')
setGeneric('pseq2mlr', function(phyloseq, target, id) standardGeneric('pseq2mlr'))
setMethod('pseq2mlr',
signature('phyloseq'),
function(phyloseq, target, id){
pseqML = new('pseqML', data = phyloseq, target = target)
X = as.data.frame(t(pseqML@data@otu_table@.Data))
Y = as.factor(phyloseq::get_variable(pseqML@data, pseqML@target))
d = cbind.data.frame(X, target = Y)
names(d) = make.names(names(d))
task = TaskClassif$new(id = id,
backend = d,
target = 'target')
pseqMLR = new('pseqMLR', data = pseqML, task = task)
return(task)
})
# Convert phyloseq to pseqML
xx = pseq2mlr(phyloseq = pseq,
target = 'cancer',
id = 'example')
library(pseqML)
# Task
# =======================================
# =======================================
# Load phyloseq data
pseq = readRDS('~/projects/Metagenomics/data/phyloseq_probeCase.rds')
# Convert phyloseq to pseqML
xx = pseq2mlr(phyloseq = pseq,
target = 'cancer',
id = 'example')
setGeneric('pseq2mlr', function(phyloseq, target, id) standardGeneric('pseq2mlr'))
setMethod('pseq2mlr',
signature('phyloseq'),
function(phyloseq, target, id){
pseqML = new('pseqML', data = phyloseq, target = target)
X = as.data.frame(t(pseqML@data@otu_table@.Data))
Y = as.factor(phyloseq::get_variable(pseqML@data, pseqML@target))
d = cbind.data.frame(X, target = Y)
names(d) = make.names(names(d))
task = TaskClassif$new(id = id,
backend = d,
target = 'target')
pseqMLR = new('pseqMLR', pseq = pseqML, task = task)
return(task)
})
# Convert phyloseq to pseqML
xx = pseq2mlr(phyloseq = pseq,
target = 'cancer',
id = 'example')
setClass('pseqMLR',
slots = c(
pseq = 'pseqML',
task = 'TaskClassif'),
prototype = list(
task = NULL))
# Convert phyloseq to pseqML
xx = pseq2mlr(phyloseq = pseq,
target = 'cancer',
id = 'example')
x = new('pseqML', data = pseq, target = 'cancer')
x
setGeneric('pseq2mlr', function(phyloseq, target, id) standardGeneric('pseq2mlr'))
setMethod('pseq2mlr',
signature('phyloseq'),
function(phyloseq, target, id){
pseqML = new('pseqML', data = phyloseq, target = target)
X = as.data.frame(t(pseqML@data@otu_table@.Data))
Y = as.factor(phyloseq::get_variable(pseqML@data, pseqML@target))
d = cbind.data.frame(X, target = Y)
names(d) = make.names(names(d))
task = TaskClassif$new(id = id,
backend = d,
target = 'target')
pseqMLR = new('pseqMLR', pseq = pseqML, task = task)
return(task)
})
require(pseqML)
# Task
# =======================================
# =======================================
# Load phyloseq data
pseq = readRDS('~/projects/Metagenomics/data/phyloseq_probeCase.rds')
require(mlr3)
# Convert phyloseq to pseqML
xx = pseq2mlr(phyloseq = pseq,
target = 'cancer',
id = 'example')
library(pseqML)
# Task
# =======================================
# =======================================
# Load phyloseq data
pseq = readRDS('~/projects/Metagenomics/data/phyloseq_probeCase.rds')
# Convert phyloseq to pseqML
xx = pseq2mlr(phyloseq = pseq,
target = 'cancer',
id = 'example')
xx
#' @exportClass pseqMLR
setClass('pseqMLR',
contains = 'pseqML',
slots = c(
task = 'TaskClassif'),
prototype = list(
data = new('pseqML')@data,
target = new('pseqML')@data,
task = NULL))
# Convert phyloseq to pseqML
xx = pseq2mlr(phyloseq = pseq,
target = 'cancer',
id = 'example')
#' An S4 placeholder for the \code{phyloseq} class from \code{phyloseq} R package.
#' @exportClass phyloseq
setOldClass('phyloseq')
#' An S4 placeholder for the \code{TaskClassif} \code{R6} class in \code{mlr3}.
#' @exportClass TaskClassif
setOldClass('TaskClassif')
#' The S4 Class for storing phyloseq data to carried out ML analyisis.
#'
#' This object stores the all information of metagenomic data
#' in one \code{\link{phyloseq}} class. In addition, ...
#' @exportClass pseqML
setClass('pseqML',
slots = c(
data = 'phyloseq',
target = 'character'
),
prototype = list(
data = NULL,
target = NULL
))
#' The S4 class inherited from \code{pseqML} to storage also \code{TaskClassif} data
#' @exportClass pseqMLR
setClass('pseqMLR',
contains = 'pseqML',
slots = c(
pseq = 'pseqML',
task = 'TaskClassif'),
prototype = list(
pseq = NULL,
task = NULL))
# Task
# =======================================
# =======================================
# Load phyloseq data
pseq = readRDS('~/projects/Metagenomics/data/phyloseq_probeCase.rds')
pseqML = new('pseqML', data = phyloseq, target = target)
target = 'cancer'
pseqML = new('pseqML', data = phyloseq, target = target)
phyloseq = pseq
pseqML = new('pseqML', data = phyloseq, target = target)
pseqML
X = as.data.frame(t(pseqML@data@otu_table@.Data))
Y = as.factor(phyloseq::get_variable(pseqML@data, pseqML@target))
d = cbind.data.frame(X, target = Y)
names(d) = make.names(names(d))
task = TaskClassif$new(id = id,
backend = d,
target = 'target')
require(mlr3)
task = TaskClassif$new(id = id,
backend = d,
target = 'target')
id = 'example'
task = TaskClassif$new(id = id,
backend = d,
target = 'target')
task
xx = new('pseqMLR',
pseq = pseqML
task = task)
xx = new('pseqMLR',
pseq = pseqML,
task = task)
xx = new('pseqMLR',
pseq = pseqML,
task = task)
pseqML
setClass('pseqMLR',
contains = 'pseqML',
slots = c(
pseq = 'pseqML',
task = 'TaskClassif'),
prototype = list(
pseq = NULL,
task = NULL))
setClass('pseqMLR',
contains = 'pseqML',
slots = c(
pseq = 'pseqML',
task = 'TaskClassif'))
xx = new('pseqMLR',
pseq = pseqML,
task = task)
pseqML@data
setClass('pseqMLR',
slots = c(
pseq = 'pseqML',
task = 'TaskClassif'))
xx = new('pseqMLR',
pseq = pseqML,
task = task)
xx
library(pseqML)
library(pseqML)
# Task
# =======================================
# =======================================
# Load phyloseq data
pseq = readRDS('~/projects/Metagenomics/data/phyloseq_probeCase.rds')
# Convert phyloseq to pseqML
xx = pseq2mlr(phyloseq = pseq,
target = 'cancer',
id = 'example')
xx
usethis::use_package('caret')
usethis::use_package('MXM')
xx@pseq@data
otutable(xx@pseq@data)
otu_table(xx@pseq@data)
rownames(otu_table(xx@pseq@data))
rownames(otu_table(xx@pseq@data))[1:3]
featus = rownames(otu_table(xx@pseq@data))[1:3]
prune_taxa(taxa = featus, x = xx@pseq@data)
xx@task$id
setGeneric('selectFeatures', function(pseqMLR, features) standardGeneric('selectFeatures'))
setMethod('selectFeatures',
signature('pseqMLR'),
function(pseqMLR, features){
prune = prune_taxa(taxa = features, x = pseqMLR@pseq@data)
pseqML = new('pseqML', data = prune, target = pseqMLR@pseqML@target)
X = get_X(pseqMLR)
task = TaskClassif$new(id = pseqMLR@task$id,
backend = X,
target = pseqMLR@pseq@target)
res = new('pseqMLR', pseq = pseqML, task = task)
return(res)
})
selectFeatures(pseqMLR = xx,
features = featus)
xx
setGeneric('selectFeatures', function(pseqMLR, features) standardGeneric('selectFeatures'))
setMethod('selectFeatures',
signature('pseqMLR'),
function(pseqMLR, features){
prune = prune_taxa(taxa = features, x = pseqMLR@pseq@data)
pseqML = new('pseqML', data = prune, target = pseqMLR@pseq@target)
X = get_X(pseqMLR)
task = TaskClassif$new(id = pseqMLR@task$id,
backend = X,
target = pseqMLR@pseq@target)
res = new('pseqMLR', pseq = pseqML, task = task)
return(res)
})
selectFeatures(pseqMLR = xx,
features = featus)
setGeneric('get_X', function(x) standardGeneric('get_X'))
setMethod('get_X', 'pseqMLR', function(x) as.data.frame(t(x@pseqML@data@otu_table@.Data)))
#' @export get_X
setGeneric('get_Y', function(x) standardGeneric('get_Y'))
setMethod('get_Y', 'pseqMLR', function(x) as.factor(phyloseq::get_variable(pseqML@data, pseqML@target)))
selectFeatures(pseqMLR = xx,
features = featus)
#' @export get_X
setGeneric('get_Y', function(x) standardGeneric('get_Y'))
setMethod('get_Y', 'pseqMLR', function(x) as.factor(phyloseq::get_variable(x@data, x@target)))
selectFeatures(pseqMLR = xx,
features = featus)
setGeneric('get_X', function(x) standardGeneric('get_X'))
setMethod('get_X', 'pseqMLR', function(x) as.data.frame(t(x@pseq@data@otu_table@.Data)))
#' @export get_X
setGeneric('get_Y', function(x) standardGeneric('get_Y'))
setMethod('get_Y', 'pseqMLR', function(x) as.factor(phyloseq::get_variable(x@data, x@target)))
selectFeatures(pseqMLR = xx,
features = featus)
#' @param features Character vector of samples to be kept
setGeneric('selectFeatures', function(pseqMLR, features) standardGeneric('selectFeatures'))
setMethod('selectFeatures',
signature('pseqMLR'),
function(pseqMLR, features){
prune = prune_taxa(taxa = features, x = pseqMLR@pseq@data)
pseqML = new('pseqML', data = prune, target = pseqMLR@pseq@target)
X = get_X(pseqMLR)
names(X) = make.names(names(X))
task = TaskClassif$new(id = pseqMLR@task$id,
backend = X,
target = pseqMLR@pseq@target)
res = new('pseqMLR', pseq = pseqML, task = task)
return(res)
})
selectFeatures(pseqMLR = xx,
features = featus)
setMethod('selectFeatures',
signature('pseqMLR'),
function(pseqMLR, features){
prune = prune_taxa(taxa = features, x = pseqMLR@pseq@data)
pseqML = new('pseqML', data = prune, target = pseqMLR@pseq@target)
X = get_X(pseqMLR)
Y = get_Y(pseqMLR)
cbind.data.frame(X, target = Y)
names(X) = make.names(names(X))
task = TaskClassif$new(id = pseqMLR@task$id,
backend = X,
target = 'target')
res = new('pseqMLR', pseq = pseqML, task = task)
return(res)
})
selectFeatures(pseqMLR = xx,
features = featus)
#' @export get_X
setGeneric('get_Y', function(x) standardGeneric('get_Y'))
setMethod('get_Y', 'pseqMLR', function(x) as.factor(phyloseq::get_variable(x@pseq@data, x@pseq@target)))
selectFeatures(pseqMLR = xx,
features = featus)
#' @export get_X1
setGeneric('get_X1', function(x) standardGeneric('get_X1'))
setMethod('get_X1', 'pseqML', function(x) as.data.frame(t(x@data@otu_table@.Data)))
#' @export get_Y1
setGeneric('get_Y1', function(x) standardGeneric('get_Y1'))
setMethod('get_Y1', 'pseqML', function(x) as.factor(phyloseq::get_variable(x@data, x@target)))
setGeneric('selectFeatures', function(pseqMLR, features) standardGeneric('selectFeatures'))
setMethod('selectFeatures',
signature('pseqMLR'),
function(pseqMLR, features){
prune = prune_taxa(taxa = features, x = pseqMLR@pseq@data)
pseqML = new('pseqML', data = prune, target = pseqMLR@pseq@target)
X = get_X1(prune)
Y = get_Y1(prune)
cbind.data.frame(X, target = Y)
names(X) = make.names(names(X))
task = TaskClassif$new(id = pseqMLR@task$id,
backend = X,
target = 'target')
res = new('pseqMLR', pseq = pseqML, task = task)
return(res)
})
selectFeatures(pseqMLR = xx,
features = featus)
setGeneric('selectFeatures', function(pseqMLR, features) standardGeneric('selectFeatures'))
setMethod('selectFeatures',
signature('pseqMLR'),
function(pseqMLR, features){
prune = prune_taxa(taxa = features, x = pseqMLR@pseq@data)
pseqML = new('pseqML', data = prune, target = pseqMLR@pseq@target)
X = get_X1(pseqML)
Y = get_Y1(pseqML)
cbind.data.frame(X, target = Y)
names(X) = make.names(names(X))
task = TaskClassif$new(id = pseqMLR@task$id,
backend = X,
target = 'target')
res = new('pseqMLR', pseq = pseqML, task = task)
return(res)
})
selectFeatures(pseqMLR = xx,
features = featus)
setGeneric('selectFeatures', function(pseqMLR, features) standardGeneric('selectFeatures'))
setMethod('selectFeatures',
signature('pseqMLR'),
function(pseqMLR, features){
prune = prune_taxa(taxa = features, x = pseqMLR@pseq@data)
pseqML = new('pseqML', data = prune, target = pseqMLR@pseq@target)
X = get_X1(pseqML)
Y = get_Y1(pseqML)
d = cbind.data.frame(X, target = Y)
names(X) = make.names(names(X))
task = TaskClassif$new(id = pseqMLR@task$id,
backend = d,
target = 'target')
res = new('pseqMLR', pseq = pseqML, task = task)
return(res)
})
selectFeatures(pseqMLR = xx,
features = featus)
setGeneric('selectFeatures', function(pseqMLR, features) standardGeneric('selectFeatures'))
setMethod('selectFeatures',
signature('pseqMLR'),
function(pseqMLR, features){
prune = prune_taxa(taxa = features, x = pseqMLR@pseq@data)
pseqML = new('pseqML', data = prune, target = pseqMLR@pseq@target)
X = get_X1(pseqML)
Y = get_Y1(pseqML)
d = cbind.data.frame(X, target = Y)
names(d) = make.names(names(d))
task = TaskClassif$new(id = pseqMLR@task$id,
backend = d,
target = 'target')
res = new('pseqMLR', pseq = pseqML, task = task)
return(res)
})
selectFeatures(pseqMLR = xx,
features = featus)
library(pseqML)
# Task
# =======================================
# =======================================
# Load phyloseq data
pseq = readRDS('~/projects/Metagenomics/data/phyloseq_probeCase.rds')
# Convert phyloseq to pseqML
xx = pseq2mlr(phyloseq = pseq,
target = 'cancer',
id = 'example')
# Make feature Selection
pseq::filterCFS(xx, cutoff = 0.5)
# Make feature Selection
pseqML::filterCFS(xx, cutoff = 0.5)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
library(pseqML)
# Task
# =======================================
# =======================================
# Load phyloseq data
pseq = readRDS('~/projects/Metagenomics/data/phyloseq_probeCase.rds')
# Convert phyloseq to pseqML
xx = pseq2mlr(phyloseq = pseq,
target = 'cancer',
id = 'example')
# Make feature Selection
pseqML::filterCFS(xx, cutoff = 0.5)
usethis::use_package('FCBF')
require(caret)
# Make feature Selection
pseqML::filterCFS(xx, cutoff = 0.5)
xx
# Make feature Selection
pseqML::filterCFS(xx, cutoff = 0.7)
# Make feature Selection
pseqML::filterCFS(xx, cutoff = 0.3)
# Make feature Selection
pseqML::filterCFS(xx, cutoff = 0.1)
# Task
# =======================================
# =======================================
# Load phyloseq data
pseq = readRDS('~/projects/Metagenomics/data/phyloseq_probeCase.rds')
dir.create('data')
save(pseq, file = 'data/random_pseq.RData')
library(pseqML)
traceback()
require(pseqML)
data('random_pseq')
require(pseqML)
data('random_pseq')
pseq
pseq
require(phyloseq)
pseq
